// Generated by Dagger (https://dagger.dev).
package uz.gita.my_max_way_uz.presentation.page.busket;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import uz.gita.my_max_way_uz.data.source.local.sharedpref.SharedPref;
import uz.gita.my_max_way_uz.domain.usecase.OrderUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BasketViewModel_Factory implements Factory<BasketViewModel> {
  private final Provider<OrderUseCase> useCaseProvider;

  private final Provider<SharedPref> sharedPrefProvider;

  public BasketViewModel_Factory(Provider<OrderUseCase> useCaseProvider,
      Provider<SharedPref> sharedPrefProvider) {
    this.useCaseProvider = useCaseProvider;
    this.sharedPrefProvider = sharedPrefProvider;
  }

  @Override
  public BasketViewModel get() {
    return newInstance(useCaseProvider.get(), sharedPrefProvider.get());
  }

  public static BasketViewModel_Factory create(Provider<OrderUseCase> useCaseProvider,
      Provider<SharedPref> sharedPrefProvider) {
    return new BasketViewModel_Factory(useCaseProvider, sharedPrefProvider);
  }

  public static BasketViewModel newInstance(OrderUseCase useCase, SharedPref sharedPref) {
    return new BasketViewModel(useCase, sharedPref);
  }
}
