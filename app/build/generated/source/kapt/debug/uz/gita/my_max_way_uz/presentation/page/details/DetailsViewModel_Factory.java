// Generated by Dagger (https://dagger.dev).
package uz.gita.my_max_way_uz.presentation.page.details;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import uz.gita.my_max_way_uz.data.source.local.sharedpref.SharedPref;
import uz.gita.my_max_way_uz.domain.usecase.OrderUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DetailsViewModel_Factory implements Factory<DetailsViewModel> {
  private final Provider<DetailsContract.Directions> directionsProvider;

  private final Provider<OrderUseCase> useCaseProvider;

  private final Provider<SharedPref> sharedPrefProvider;

  public DetailsViewModel_Factory(Provider<DetailsContract.Directions> directionsProvider,
      Provider<OrderUseCase> useCaseProvider, Provider<SharedPref> sharedPrefProvider) {
    this.directionsProvider = directionsProvider;
    this.useCaseProvider = useCaseProvider;
    this.sharedPrefProvider = sharedPrefProvider;
  }

  @Override
  public DetailsViewModel get() {
    return newInstance(directionsProvider.get(), useCaseProvider.get(), sharedPrefProvider.get());
  }

  public static DetailsViewModel_Factory create(
      Provider<DetailsContract.Directions> directionsProvider,
      Provider<OrderUseCase> useCaseProvider, Provider<SharedPref> sharedPrefProvider) {
    return new DetailsViewModel_Factory(directionsProvider, useCaseProvider, sharedPrefProvider);
  }

  public static DetailsViewModel newInstance(DetailsContract.Directions directions,
      OrderUseCase useCase, SharedPref sharedPref) {
    return new DetailsViewModel(directions, useCase, sharedPref);
  }
}
