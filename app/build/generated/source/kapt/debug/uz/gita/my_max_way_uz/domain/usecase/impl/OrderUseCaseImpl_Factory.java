// Generated by Dagger (https://dagger.dev).
package uz.gita.my_max_way_uz.domain.usecase.impl;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import uz.gita.my_max_way_uz.domain.repository.OrderRepository;
import uz.gita.my_max_way_uz.domain.repository.RoomRepository;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OrderUseCaseImpl_Factory implements Factory<OrderUseCaseImpl> {
  private final Provider<OrderRepository> repositoryProvider;

  private final Provider<RoomRepository> roomRepositoryProvider;

  public OrderUseCaseImpl_Factory(Provider<OrderRepository> repositoryProvider,
      Provider<RoomRepository> roomRepositoryProvider) {
    this.repositoryProvider = repositoryProvider;
    this.roomRepositoryProvider = roomRepositoryProvider;
  }

  @Override
  public OrderUseCaseImpl get() {
    return newInstance(repositoryProvider.get(), roomRepositoryProvider.get());
  }

  public static OrderUseCaseImpl_Factory create(Provider<OrderRepository> repositoryProvider,
      Provider<RoomRepository> roomRepositoryProvider) {
    return new OrderUseCaseImpl_Factory(repositoryProvider, roomRepositoryProvider);
  }

  public static OrderUseCaseImpl newInstance(OrderRepository repository,
      RoomRepository roomRepository) {
    return new OrderUseCaseImpl(repository, roomRepository);
  }
}
