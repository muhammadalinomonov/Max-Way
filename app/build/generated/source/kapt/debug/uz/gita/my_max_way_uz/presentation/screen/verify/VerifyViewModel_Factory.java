// Generated by Dagger (https://dagger.dev).
package uz.gita.my_max_way_uz.presentation.screen.verify;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import uz.gita.my_max_way_uz.data.source.local.sharedpref.SharedPref;
import uz.gita.my_max_way_uz.domain.repository.AuthRepository;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class VerifyViewModel_Factory implements Factory<VerifyViewModel> {
  private final Provider<VerifyContract.Direction> directionProvider;

  private final Provider<AuthRepository> repositoryProvider;

  private final Provider<SharedPref> sharedPrefProvider;

  public VerifyViewModel_Factory(Provider<VerifyContract.Direction> directionProvider,
      Provider<AuthRepository> repositoryProvider, Provider<SharedPref> sharedPrefProvider) {
    this.directionProvider = directionProvider;
    this.repositoryProvider = repositoryProvider;
    this.sharedPrefProvider = sharedPrefProvider;
  }

  @Override
  public VerifyViewModel get() {
    return newInstance(directionProvider.get(), repositoryProvider.get(), sharedPrefProvider.get());
  }

  public static VerifyViewModel_Factory create(Provider<VerifyContract.Direction> directionProvider,
      Provider<AuthRepository> repositoryProvider, Provider<SharedPref> sharedPrefProvider) {
    return new VerifyViewModel_Factory(directionProvider, repositoryProvider, sharedPrefProvider);
  }

  public static VerifyViewModel newInstance(VerifyContract.Direction direction,
      AuthRepository repository, SharedPref sharedPref) {
    return new VerifyViewModel(direction, repository, sharedPref);
  }
}
